name: Build & Deploy to IIS (self-hosted)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-iis
  cancel-in-progress: true

# Use Windows PowerShell everywhere (your box doesn't have pwsh)
defaults:
  run:
    shell: powershell

jobs:
  deploy:
    runs-on: [ self-hosted, Windows, X64 ]   # matches the built-in labels
    timeout-minutes: 30

    # Put dotnet where the service account can write
    env:
      DOTNET_INSTALL_DIR: ${{ runner.temp }}\dotnet

    steps:
      - name: Allow scripts in this job
        run: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

      # Optional but recommended so checkout uses Git (not the archive fallback)
      - name: Git version
        run: git --version

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # If you have global.json, this will honor it.
          # Otherwise comment the line above and use a version like:
          # dotnet-version: '8.0.x'
          global-json-file: ./global.json

      - name: Ensure dotnet on PATH (custom install dir)
        run: |
          "$env:DOTNET_INSTALL_DIR" | Out-File -FilePath $env:GITHUB_PATH -Append
          dotnet --info

      - name: Restore
        run: dotnet restore .\Website.csproj

      - name: Build (Release)
        run: dotnet build .\Website.csproj -c Release --no-restore

      - name: Publish (self-contained folder)
        run: |
          $pub = Join-Path $env:RUNNER_TEMP "publish"
          dotnet publish .\Website.csproj -c Release -o $pub --no-build
          Write-Host "Publish folder: $pub"
          "PUBLISH_DIR=$pub" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ensure IIS site folder permissions (once)
        run: |
          $site = 'C:\websites\clintmcmahon.com'
          if (-not (Test-Path $site)) { New-Item -Path $site -ItemType Directory -Force | Out-Null }
          icacls $site /grant "NT AUTHORITY\NETWORK SERVICE:(OI)(CI)M" /T

      - name: Stop AppPool + take site offline
        run: |
          $appPool = 'clintmcmahon.com'
          Import-Module WebAdministration
          if ((Get-WebAppPoolState -Name $appPool).Value -ne 'Stopped') {
            Stop-WebAppPool -Name $appPool
          }
          $sitePath = 'C:\websites\clintmcmahon.com'
          Set-Content -Path (Join-Path $sitePath 'app_offline.htm') -Value '<html><body><h3>Updatingâ€¦ back in a moment.</h3></body></html>'

      - name: Backup current site (zip)
        run: |
          $sitePath = 'C:\websites\clintmcmahon.com'
          $backupRoot = 'C:\websites\_backups'
          if (-not (Test-Path $backupRoot)) { New-Item $backupRoot -ItemType Directory | Out-Null }
          $stamp = Get-Date -Format 'yyyyMMdd-HHmmss'
          $dest = Join-Path $backupRoot "site-$stamp.zip"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [IO.Compression.ZipFile]::CreateFromDirectory($sitePath, $dest)

      - name: Deploy publish output (robocopy mirror)
        run: |
          $src = "$env:PUBLISH_DIR\"
          $dst = 'C:\websites\clintmcmahon.com\'
          robocopy $src $dst /MIR /NFL /NDL /NJH /NJS /NP /R:2 /W:2 /XF app_offline.htm
          if ($LASTEXITCODE -gt 3) { throw "robocopy failed with exit code $LASTEXITCODE" }

      - name: Bring site online + start AppPool
        run: |
          $appPool = 'clintmcmahon.com'
          $sitePath = 'C:\websites\clintmcmahon.com'
          Remove-Item (Join-Path $sitePath 'app_offline.htm') -ErrorAction SilentlyContinue
          Import-Module WebAdministration
          Start-WebAppool -Name $appPool

      - name: Smoke check (optional)
        continue-on-error: true
        run: |
          try {
            $resp = Invoke-WebRequest http://localhost/ -UseBasicParsing -TimeoutSec 10
            Write-Host "HTTP $($resp.StatusCode)"
          } catch { Write-Warning $_ }
